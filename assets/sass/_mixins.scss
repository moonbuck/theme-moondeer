// Fonts
@mixin eaves-font($weight, $style: normal) {
  font-family: $eaves-font-family;
  font-style: $style;
  font-weight: if(type-of($weight) == string, 
                  map-get($eaves-font-weights, $weight),
                  $weight)
}

@mixin input-font($weight, $style: normal) {
  font-family: $input-font-family;
  font-style: $style;
  font-weight: if(type-of($weight) == string, 
                  map-get($input-font-weights, $weight),
                  $weight)
}

// Adds a padded border
@mixin border($edges, 
              $size: 2px, 
              $padding: null, 
              $style: solid, 
              $color: $border-color) 
{
  
  @each $edge in $edges {    
    border-#{$edge}: $size $style $color;
    @if $padding {
      padding-#{$edge}: $padding;
    }
  }
  
}

// Makes an element responsive
@mixin fluid-media {
  max-width: 100%;
  height: auto;
}
 
// Adds a media query for the provided block
@mixin media($features, $invert: false, $types: screen) {
  
  @if type-of($features) == list {
  
    $fm-count: length($features);
    
    @if $fm-count > 0 {
      
      $fm-lists: ();
      
      @each $feature-map in $features {
        
        $fm-list: "";
        $features: map-keys($feature-map);
        $feature-count: length($features);
  
        @if $feature-count > 0 {
            
            $is-first: true;
            @each $feature, $value in $feature-map {
                @if $is-first {
                  $fm-list: "(#{$feature}: #{$value})";
                  $is-first: false;
                } @else {
                  $fm-list: "#{$fm-list} and (#{$feature}: #{$value})";
                }
            }
         $fm-lists: append($fm-lists, $fm-list, $separator: comma); 
        }
      }
       @media #{$types} and #{$fm-lists} {
         @content;
       }
    } 
  
    } @else if type-of($features) == map {
      
      $fm-list: "";
      
      @each $feature, $value in $features {
        $fm-list: "#{$fm-list} and (#{$feature}: #{$value})";
      }
      
      @media #{$types} #{$fm-list} {
         @content;
       }
    }
  
  @else {
    
    @media #{if($invert, "not", "only")} #{$types} {
        s: type-of($features);
      @content;
    }
    
  }
  
}

// Creates a circle
@mixin circle($size) {
  width: $size;
  height: $size;
  border-radius: 50%;
}

// Creates a flex-box stack
@mixin stack($direction: row,
             $wrap: nowrap,
             $justify: flex-start,
             $align: stretch,
             $gap: normal)
{
  display: flex;
  flex-direction: $direction;  
  flex-wrap: $wrap;
  justify-content: $justify;
  align-content: $align;
  gap: $gap;
  @if $direction == column { flex: 1 1 auto; }
  align-self: stretch;
  
}

// Creates a vertical flex-box stack
@mixin vstack($wrap: nowrap,
              $justify: stretch,
              $align: stretch,
              $gap: normal)
{
  @include stack(column, $wrap, $justify, $align, $gap);
}

// Creates a horizontal flex-box stack
@mixin hstack($wrap: nowrap,
              $justify: center,
              $align: stretch,
              $gap: normal)
{
  @include stack(row, $wrap, $justify, $align, $gap);
}

// Zero out margin and add padding
@mixin flush-pad($padding: 1rem) {
  margin: 0;
  padding: $padding;
}